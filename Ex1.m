%% EX1
clear all
close all
clc
disp('Noam Atias 311394357, Chanel Michaeli 208491787')
%% Q1.1 - Reading the Image
% Q1.1.1 
picasso = imread('picasso.jpg');
picasso_gray = double(rgb2gray(picasso));

%%Q1.1.2
figure('Name','1.1.2')
imagesc(picasso_gray);
colormap("gray");
colorbar;
title('picasso image - gray scale')

%% Q1.2 - Histogram Construction
%Q1.2.2
figure('Name','1.2.2');
subplot(2,1,1);
[our_counts,our_bins_location] = dip_histogram(picasso_gray,256);
title('picasso histogram generated by dip histogram function');
subplot(2,1,2);
[counts,binLocations] = imhist(uint8(picasso_gray));
stem(binLocations,counts,'Marker','none');
title('picasso histogram generated by MATLAB function');

%% Compare between Histograms
D = pdist2(counts,our_counts','euclidean');
D_trace = trace(D);

%% Q1.2.3
figure('Name','1.2.3');
for i = 1:3
    filter_g = zeros(size(picasso_gray,1),size(picasso_gray,2));
    filter_g(75*(i-1)<=picasso_gray<=80*i) = 1;
    filter_g(picasso_gray>80*i) = 0;
    filter_g(picasso_gray<80*(i-1)) = 0;
    subplot(1,3,i)
    imshow(picasso_gray.*filter_g)
    title(['Image range: [' num2str(80*(i-1)) ',' num2str(i*80) ']']);
end

%PDF

%% Q1.2.4 
% nbins = 128
figure('Name','1.2.4')
subplot(3,2,1)
dip_histogram(picasso_gray,128);
title('dip histogram function, nbins = 128')
subplot(3,2,2)
[counts,binLocations] = imhist(uint8(picasso_gray),128);
stem(binLocations,counts,'Marker','none');
title('MATLAB function, nbins = 128')

% nbins = 32
subplot(3,2,3)
dip_histogram(picasso_gray,32);
title('dip histogram function, nbins = 32')
subplot(3,2,4)
[counts,binLocations] = imhist(uint8(picasso_gray),32);
stem(binLocations,counts,'Marker','none');
title('MATLAB function, nbins = 32')

% nbins = 4
subplot(3,2,5)
dip_histogram(picasso_gray,4);
title('dip histogram function, nbins = 4')
subplot(3,2,6)
[counts,binLocations] = imhist(uint8(picasso_gray),4);
stem(binLocations,counts,'Marker','none');
title('MATLAB function, nbins = 4')

%% Q1.3 - Brightness
% Q1.3.2
figure('Name','1.3.2')
subplot(1,5,1)
imshow(dip_GN_imread('picasso.jpg'))
title('Original gray scale image')
subplot(1,5,2)
imshow(adjust_brightness('picasso.jpg','mul',1.5))
title('Multiply by factor 1.5')
subplot(1,5,3)
imshow(adjust_brightness('picasso.jpg','mul',3))
title('Multiply by factor 3')
subplot(1,5,4)
imshow(adjust_brightness('picasso.jpg','add',0.5))
title('Add by factor 0.5')
subplot(1,5,5)
imshow(adjust_brightness('picasso.jpg','add',-0.5))
title('Add by factor -0.5')

%% Q1.4 - Contrast
% Q1.4.2
figure('Name','1.4.2');
img_1=adjust_contrast('picasso.jpg',0.45,0.9);
img_2=adjust_contrast('picasso.jpg',0.4,0.5);
img_3=adjust_contrast('picasso.jpg',1,0);
subplot(2,3,1)
imshow(img_1)
title('Dynamic ranges of [0.45,0.9]');
subplot(2,3,4)
dip_histogram(img_1*256,256);
title('Histogram - dynamic ranges of [0.45,0.9]');
subplot(2,3,2)
imshow(img_2)
title('Dynamic ranges of [0.4,0.5]');
subplot(2,3,5)
dip_histogram(img_2*256,256);
title('Histogram - dynamic ranges of [0.45,0.5]');
subplot(2,3,3)
imshow(img_3)
title('Dynamic ranges of [1,0]');
subplot(2,3,6)
dip_histogram(img_3*256,256);
title('Histogram - dynamic ranges of [1,0]');

%%Q1.4.3 - Non linear mapping
non_linear_adj02_08 = dip_GN_imread('picasso.jpg');
non_linear_adj045_09 = dip_GN_imread('picasso.jpg');
% Range of [0.45,0.9]
non_linear_adj02_08(non_linear_adj02_08<=0.2) = 0.2;
non_linear_adj02_08(non_linear_adj02_08>=0.8) = 0.8;
figure('Name','1.4.3');
subplot(1,2,1)
imshow(non_linear_adj02_08)
title('None linear mapping of range [0.2,0.8]')
% Range of [0.2,0.8]
non_linear_adj045_09(non_linear_adj045_09<=0.45) = 0.45;
non_linear_adj045_09(non_linear_adj045_09>=0.9) = 0.9;
subplot(1,2,2)
imshow(non_linear_adj045_09)
title('None linear mapping of range [0.45,0.9]')

%% Q1.5 - Quantization
figure('Name','1.5');
index = 1;
for numbit = [6 4 2 1]
    Q = quant('picasso.jpg',numbit);
    subplot(2,2,index)
    imshow(Q);
    title (['Picasso after quantization of ', num2str(numbit),' bits'])
    index=index+1;       
end

%% Q1.6 - Histogram Equalization
%Q1.6.1
norm_dog = dip_GN_imread('dog.jpg');
%%Q1.6.2 - Q1.6.3
figure('Name','1.6.2');
subplot(2,1,1);
imshow(norm_dog);
subplot(2,1,2);
imhist(norm_dog,256);
h = histeq(norm_dog);
figure('Name','1.6.3');
subplot(2,1,1);
imshow(h);
subplot(2,1,2);
imhist(h,256);
%%1.6.4 PDF
figure('Name','1.6.4');
imshow(norm_dog.^0.75);

%% Q1.7.1 - Q1.7.2 - Q1.7.3
norm_view= dip_GN_imread('south_america.jpg');
norm_city = dip_GN_imread('city.jpg');
face = double(imread('face.jpg'));
norm_face = (face - min(face(:)))/(max(face(:))-min(face(:)));
%Q1.7.4
figure('Name','1.7.4');
subplot(3,2,1);
imshow(norm_view);
title('My view')
subplot(3,2,2);
imhist(norm_view);
title('My view Histogram')
subplot(3,2,3);
imshow(norm_city);
title('City image')
subplot(3,2,4);
imhist(norm_city);
title('City Histogram')
subplot(3,2,5);
imshow(norm_face);
title('Face image')
subplot(3,2,6);
imhist(norm_face);
title('Face Histogram')
%Q1.7.5
match_hist_1 = imhistmatch(norm_view,norm_city);
match_hist_2 = imhistmatch(norm_view,norm_face);
%Q1.7.6
figure('Name','1.7.6');
subplot(2,2,1);
imshow(match_hist_1);
title('Imhistmatch(my image,city)');
subplot(2,2,2);
imhist(match_hist_1);
title('histogram of output image');
subplot(2,2,3);
imshow(match_hist_2);
title('Imhistmatch(my image,face)');
subplot(2,2,4);
imhist(match_hist_2);
title('histogram of output image');
%1.7.7 PDF

%% Q2.1 -Read The Image
norm_dog_img = dip_GN_imread('dog.jpg');

%% Q2.3 - Mean vs Median Filter

%kernel size 3x3
mean3 = mean_filter(norm_dog_img,3);
median3 = median_filter(norm_dog_img,3);

%kernel size 5x5
mean5 = mean_filter(norm_dog_img,5);
median5 = median_filter(norm_dog_img,5);

%kernel size 9x9
mean9 = mean_filter(norm_dog_img,9);
median9 = median_filter(norm_dog_img,9);

%% show images after filtering

figure('Name','2.2.3')
subplot(1,2,1)
imshow(median3)
title('Dog image filtering - median filter 3x3')
subplot(1,2,2)
imshow(mean3)
title('Dog image filtering - mean filter 3x3')

figure('Name','2.2.3')
subplot(1,2,1)
imshow(median5)
title('Dog image filtering - median filter 5x5')
subplot(1,2,2)
imshow(mean5)
title('Dog image filtering - mean filter 5x5')

figure('Name','2.2.3')
subplot(1,2,1)
imshow(median9)
title('Dog image filtering - median filter 9x9')
subplot(1,2,2)
imshow(mean9)
title('Dog image filtering - mean filter 9x9')

%% Q2.3- Gaussian Filter
% Q2.3.2 & Q2.3.3

k = [3 3 9 9];
sigma = [0.2 1.7 0.2 1.7];
figure('Name','2.3.2')
for i = 1:4
    blured_img = dip_gaussian_filter(norm_dog_img, k(i), sigma(i));
    subplot(2,2,i)
    imshow(blured_img)
    title(['Gaussian Filter k=' num2str(k(i)) ' sigma=' num2str(sigma(i))])
end 
figure('Name','2.3.3')
for i = 1:4
    blured_img = dip_gaussian_filter(norm_dog_img, k(i), sigma(i));    
    subplot(2,2,i)
    diff = abs(norm_dog_img - blured_img);
    imshow(diff,[])
    title(['Subtracted image filtered k=' num2str(k(i)) ' sigma=' num2str(sigma(i))],'FontSize',9)
end 
%% Q2.4 - Anisotropic Difiusion Filter

j_dog = imdiffusefilt(norm_dog_img);
figure('Name','2.4.2')
imshow(j_dog)
title('Anisotropic difiusion filter on dog image')

%% Q2.5 - Noise Filtering

square_img = imread('square.jpg');
square_img = double(square_img);
norm_square_img = (square_img - min(square_img(:)))/(max(square_img(:))-min(square_img(:)));

noisy_image_filtering(norm_square_img,1);
noisy_image_filtering(norm_dog_img,0);


%% Functions
% Q1.1.3
function normalize = dip_GN_imread(file_name)
    img = imread(file_name);
    img = double(rgb2gray(img));
    normalize = (img - min(img(:)))/(max(img(:))-min(img(:)));
end

%Q1.2.1

function [counts,bin_index]=dip_histogram(img,nbins)
channel = size(img,3);
counts=zeros(channel,nbins);
bin=1:nbins;
up=255*(bin-0.5)/(nbins-1); 
down=255*(bin-1.5)/(nbins-1); 
for i=1:channel
    I=img(:,:,i);
    for j=1:nbins
        counts(i,j)=sum(sum(down(j)<=I & I<up(j)));
    end
end
counts=sum(counts,1);
bin_index=down(1)+(up(1)-down(1))/2:255/(nbins-1):down(end)+(up(end)-down(end))/2; % calcultes bin location
stem(bin_index,counts,'Marker','none');
end

%Q1.3.1
function brightness_image = adjust_brightness(image,action,parameter)
img = dip_GN_imread(image);
    if action == 'mul'
        brightness_image =img*parameter;
    elseif action == 'add'
        brightness_image =img+parameter;
    end
    brightness_image(brightness_image<0)=0;
    brightness_image(brightness_image>1)=1;
end

%Q1.4.1
function contrast_image = adjust_contrast(image,range_low,range_high)
img = dip_GN_imread(image);
    contrast_image = img*(range_high - range_low) + range_low;
end

%Q1.5
function [quantization,q] = quant(image,numbit)
img = dip_GN_imread(image);
img = img*256;
gray_range = [0:(2^numbit)-1];
gap = 256/(2^numbit-1);
quantization = zeros(size(img,1),size(img,2));
    for i = 0:length(gray_range)-1
        a = (i*gap)/2;
        b = ((i+1)*gap)/2;
        quantization(img>=a & img<b) = gray_range(i+1)*gap;
    end
    b = ((gray_range(end)+1)*gap)/2;
    quantization(img>=b) = 256;
    q = quantization;
    quantization=(quantization-min(quantization(:)))/(max(quantization(:))-min(quantization(:)));
end 

%Q2.5
function noisy_image_filtering(img,i)
    % Q2.5.1 - generate noisy images
    gaussian_noised = imnoise(img,"gaussian");
    salt_pepper_noised = imnoise(img,"salt & pepper");
    speckle_noised = imnoise(img,"speckle");
    
    % Q2.5.2 - filtering
    %mean filter 3x3
    g_noise_mean3 = mean_filter(gaussian_noised,3);
    s_p_noise_mean3 = mean_filter(salt_pepper_noised,3);
    s_noise_mean3 = mean_filter(speckle_noised,3);
    
    %mean filter 9x9
    g_noise_mean9 = mean_filter(gaussian_noised,9);
    s_p_noise_mean9 = mean_filter(salt_pepper_noised,9);
    s_noise_mean9 = mean_filter(speckle_noised,9);
    
    %median filter 3x3
    g_noise_median3 = median_filter(gaussian_noised,3);
    s_p_noise_median3 = median_filter(salt_pepper_noised,3);
    s_noise_median3 = median_filter(speckle_noised,3);
    
    %median filter 9x9
    g_noise_median9 = median_filter(gaussian_noised,9);
    s_p_noise_median9 = median_filter(salt_pepper_noised,9);
    s_noise_median9 = median_filter(speckle_noised,9);
    
    %gaussian flter 3x3
    g_noise_gaussian3 = dip_gaussian_filter(gaussian_noised, 3, 1);
    s_p_noise_gaussian3 = dip_gaussian_filter(salt_pepper_noised, 3, 1);
    s_noise_gaussian3 = dip_gaussian_filter(speckle_noised, 3, 1);
    
    %gaussian flter 9x9
    g_noise_gaussian9 = dip_gaussian_filter(gaussian_noised, 9, 1);
    s_p_noise_gaussian9 = dip_gaussian_filter(salt_pepper_noised, 9, 1);
    s_noise_gaussian9 = dip_gaussian_filter(speckle_noised, 9, 1);
    
    %Anisotropic Difiusion Filter 
    g_anisotropic_difiusion = imdiffusefilt(gaussian_noised);
    s_p_anisotropic_difiusion = imdiffusefilt(salt_pepper_noised);
    s_anisotropic_difiusion = imdiffusefilt(speckle_noised);
    
    % Q2.5.3 - display images
    
    figure;
    subplot(2,2,1)
    imshow(gaussian_noised)
    title('Gaussian noised image')
    subplot(2,2,2)
    imshow(g_noise_mean3)
    title('Gaussian noise- mean filter k=3')
    subplot(2,2,3)
    imshow(g_noise_median3)
    title('Gaussian noise- median filter k=3')
    subplot(2,2,4)
    imshow(g_noise_gaussian3)
    title('Gaussian noise- gaussian filter k=3,sigma=1')
    
    figure;
    subplot(2,2,1)
    imshow(salt_pepper_noised)
    title('Salt&pepper noised image')
    subplot(2,2,2)
    imshow(s_p_noise_mean3)
    title('Salt&pepper noise- mean filter k=3')
    subplot(2,2,3)
    imshow(s_p_noise_median3)
    title('Salt&pepper- median filter k=3')
    subplot(2,2,4)
    imshow(s_p_noise_gaussian3)
    title('Salt&pepper noise- gaussian filter k=3,sigma=1')
    
    figure;
    subplot(2,2,1)
    imshow(speckle_noised)
    title('Speckle noised image')
    subplot(2,2,2)
    imshow(s_noise_mean3)
    title('Speckle noise- mean filter k=3')
    subplot(2,2,3)
    imshow(s_noise_median3)
    title('Speckle- median filter k=3')
    subplot(2,2,4)
    imshow(s_noise_gaussian3)
    title('Speckle noise- gaussian filter k=3,sigma=1')
    
    figure;
    subplot(2,2,1)
    imshow(gaussian_noised)
    title('Gaussian noised image')
    subplot(2,2,2)
    imshow(g_noise_mean9)
    title('Gaussian noise- mean filter k=9')
    subplot(2,2,3)
    imshow(g_noise_median9)
    title('Gaussian noise- median filter k=9')
    subplot(2,2,4)
    imshow(g_noise_gaussian9)
    title('Gaussian noise- gaussian filter k=9,sigma=1')
    
    figure;
    subplot(2,2,1)
    imshow(salt_pepper_noised)
    title('Salt&pepper noised image')
    subplot(2,2,2)
    imshow(s_p_noise_mean9)
    title('Salt&pepper noise- mean filter k=9')
    subplot(2,2,3)
    imshow(s_p_noise_median9)
    title('Salt&pepper- median filter k=9')
    subplot(2,2,4)
    imshow(s_p_noise_gaussian9)
    title('Salt&pepper noise- gaussian filter k=9,sigma=1')
    
    figure;
    subplot(2,2,1)
    imshow(speckle_noised)
    title('Speckle noised image')
    subplot(2,2,2)
    imshow(s_noise_mean9)
    title('Speckle noise- mean filter k=9')
    subplot(2,2,3)
    imshow(s_noise_median9)
    title('Speckle- median filter k=9')
    subplot(2,2,4)
    imshow(s_noise_gaussian9)
    title('Speckle noise- gaussian filter k=9,sigma=1')
    
    figure;
    subplot(2,2,1)
    imshow(g_anisotropic_difiusion)
    title('Gaussian noise- Anisotropic Difiusion filter')
    subplot(2,2,2)
    imshow(s_p_anisotropic_difiusion)
    title('Salt&pepper noise- Anisotropic Difiusion filter')
    subplot(2,2,3)
    imshow(s_anisotropic_difiusion)
    title('Speckle- Anisotropic Difiusion filter')

    if i==1
        figure;
        subplot(2,1,1)
        plot(1:width(img(400,:)),img(400,:),'b--o')
        hold on;
        plot(1:width(img(400,:)),gaussian_noised(400,:))
        hold on;
        plot(1:width(img(400,:)),g_noise_mean3(400,:),'m+')
        hold on;
        plot(1:width(img(400,:)),g_noise_median3(400,:),'c*')
        hold on;
        plot(1:width(img(400,:)),g_noise_gaussian3(400,:),"g-.")
        hold on;
        plot(1:width(img(400,:)),g_anisotropic_difiusion(400,:),"yx")
        title('Gaussian noise')
        xlabel('pixel number in the image width')
        ylabel('pixel value (normalized)')
        legend('original image','noisy image','mean filter 3x3','median filter 3x3','gaussian filter 3x3','anisotropic difiusion')
       
        subplot(2,1,2)
        plot(1:width(img(400,:)),img(400,:),'b--o')
        hold on;
        plot(1:width(img(400,:)),gaussian_noised(400,:))
        hold on;
        plot(1:width(img(400,:)),g_noise_mean9(400,:),'m+')
        hold on;
        plot(1:width(img(400,:)),g_noise_median9(400,:),'c*')
        hold on;
        plot(1:width(img(400,:)),g_noise_gaussian9(400,:),"g-.")
        hold on;
        plot(1:width(img(400,:)),g_anisotropic_difiusion(400,:),"yx")
        title('Gaussian noise')
        xlabel('pixel number in the image width')
        ylabel('pixel value (normalized)')
        legend('original image','noisy image','mean filter 9x9','median filter 9x9','gaussian filter 9x9','anisotropic difiusion')    

        figure;
        subplot(2,1,2)
        plot(1:width(img(400,:)),img(400,:),'b--o')
        hold on;
        plot(1:width(img(400,:)),salt_pepper_noised(400,:))
        hold on;
        plot(1:width(img(400,:)),s_p_noise_mean9(400,:),'m+')
        hold on;
        plot(1:width(img(400,:)),s_p_noise_median9(400,:),'c*')
        hold on;
        plot(1:width(img(400,:)),s_p_noise_gaussian9(400,:),"g-.")
        hold on;
        plot(1:width(img(400,:)),s_p_anisotropic_difiusion(400,:),"yx")
        title('Salt&Pepper noise')
        xlabel('pixel number in the image width')
        ylabel('pixel value (normalized)')
        legend('original image','noisy image','mean filter 9x9','median filter 9x9','gaussian filter 9x9','anisotropic difiusion')
        
        subplot(2,1,1)
        plot(1:width(img(400,:)),img(400,:),'b--o')
        hold on;
        plot(1:width(img(400,:)),salt_pepper_noised(400,:))
        hold on;
        plot(1:width(img(400,:)),s_p_noise_mean3(400,:),'m+')
        hold on;
        plot(1:width(img(400,:)),s_p_noise_median3(400,:),'c*')
        hold on;
        plot(1:width(img(400,:)),s_p_noise_gaussian3(400,:),"g-.")
        hold on;
        plot(1:width(img(400,:)),s_p_anisotropic_difiusion(400,:),"yx")
        title('Salt&Pepper noise')
        xlabel('pixel number in the image width')
        ylabel('pixel value (normalized)')
        legend('original image','noisy image','mean filter 3x3','median filter 3x3','gaussian filter 3x3','anisotropic difiusion')
    
        figure;
        subplot(2,1,1)
        plot(1:width(img(400,:)),img(400,:),'b--o')
        hold on;
        plot(1:width(img(400,:)),speckle_noised(400,:))
        hold on;
        plot(1:width(img(400,:)),s_noise_mean3(400,:),'m+')
        hold on;
        plot(1:width(img(400,:)),s_noise_median3(400,:),'c*')
        hold on;
        plot(1:width(img(400,:)),s_noise_gaussian3(400,:),"g-.")  
        hold on;
        plot(1:width(img(400,:)),s_anisotropic_difiusion(400,:),"yx")
        title('Speckle noise')
        xlabel('pixel number in the image width')
        ylabel('pixel value (normalized)')
        legend('original image','noisy image','mean filter 3x3','median filter 3x3','gaussian filter 3x3','anisotropic difiusion')
    
        subplot(2,1,2)
        plot(1:width(img(400,:)),img(400,:),'b--o')
        hold on;
        plot(1:width(img(400,:)),speckle_noised(400,:))
        hold on;
        plot(1:width(img(400,:)),s_noise_mean9(400,:),'m+')
        hold on;
        plot(1:width(img(400,:)),s_noise_median9(400,:),'c*')
        hold on;
        plot(1:width(img(400,:)),s_noise_gaussian9(400,:),"g-.")  
        hold on;
        plot(1:width(img(400,:)),s_anisotropic_difiusion(400,:),"yx")
        title('Speckle noise')
        xlabel('pixel number in the image width')
        ylabel('pixel value (normalized)')
        legend('original image','noisy image','mean filter 9x9','median filter 9x9','gaussian filter 9x9','anisotropic difiusion')
    end
end

%Q2.2
function m = mean_filter(img,k)
    m = zeros(height(img),width(img)); %%m is the estimation of the background x. mean of the eight (three or five if the pixel at the edge of the image) adjacent pixels
    temp = padarray(img,[floor(k/2) floor(k/2)],0,'both');
    img_ones = ones(height(img),width(img));
    padded_img_ones= padarray(img_ones,[floor(k/2) floor(k/2)],0,'both');
    for j = ceil(k/2):height(img)+floor(k/2)
        for i = ceil(k/2):width(img)+floor(k/2)
            filter = temp(j-floor(k/2):j+floor(k/2),i-floor(k/2):i+floor(k/2));
            filter_ones = padded_img_ones(j-floor(k/2):j+floor(k/2),i-floor(k/2):i+floor(k/2));
            val = sum(filter,"all")-filter(ceil(k/2),ceil(k/2));
            if any(filter_ones(:) == 0)
                m(j-floor(k/2),i-floor(k/2)) = (1/(numel(filter)-sum(~filter_ones(:))-1)) * val;
            end
            if j ~= ceil(k/2) && i ~= ceil(k/2) && j ~= height(img)+floor(k/2) && i ~= width(img)+floor(k/2)
                m(j-floor(k/2),i-floor(k/2)) = 1/(k*k-1) * val;
            end
        end
     end
end

function median = median_filter(img,k) 
    median = zeros(height(img),width(img)); 
    temp = padarray(img,[floor(k/2) floor(k/2)],0,'both');
    img_ones = ones(height(img),width(img));
    padded_img_ones= padarray(img_ones,[floor(k/2) floor(k/2)],0,'both');
    for j = ceil(k/2):height(img)+floor(k/2)
        for i = ceil(k/2):width(img)+floor(k/2)
            filter = temp(j-floor(k/2):j+floor(k/2),i-floor(k/2):i+floor(k/2));
            filter_ones = padded_img_ones(j-floor(k/2):j+floor(k/2),i-floor(k/2):i+floor(k/2));
            f = nonzeros(filter + filter_ones)-1;
            while true
                finished = 1;
                for s=1:height(f)-1
                    if f(s)>f(s+1)
                        c=f(s);
                        f(s)=f(s+1);
                        f(s+1)=c;
                        finished = 0;
                    end
                end
                if finished
                    break
                end
            end
            [X,Y] = ismember(filter(ceil(k/2),ceil(k/2)),f);
            f(Y(X)) = [];
            if rem(height(f), 2) == 1
                median(j-floor(k/2),i-floor(k/2)) = f(ceil(height(f)/2));
            else
                median(j-floor(k/2),i-floor(k/2)) = (f((height(f)/2)+1)+f((height(f)/2)))/2;
            end
        end
     end
end

% Q2.3.1
function blured_img = dip_gaussian_filter(img, k, sigma)
    blured_img = zeros(height(img),width(img)); 
    temp = padarray(img,[floor(k/2) floor(k/2)],0,'both');
    [X, Y] = meshgrid(-floor(k/2):floor(k/2),-floor(k/2):floor(k/2));
    gaussian_fil =(1/(2*pi*(sigma^2)))*exp(-(X.^2+Y.^2)./(2*(sigma^2)));
    gaussian_fil=gaussian_fil./sum(gaussian_fil,'all');
    for i = ceil(k/2):height(img)-floor(k/2)
        for j = ceil(k/2):width(img)-floor(k/2)
            blured_img(i,j)=sum(gaussian_fil.*temp(i-floor(k/2):i+floor(k/2),j-floor(k/2):j+floor(k/2)),'All');
        end
    end
end

